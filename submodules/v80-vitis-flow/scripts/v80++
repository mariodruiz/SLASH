#!/bin/bash

# ##################################################################################################
#  The MIT License (MIT)
#  Copyright (c) 2025 Advanced Micro Devices, Inc. All rights reserved.
# 
#  Permission is hereby granted, free of charge, to any person obtaining a copy of this software
#  and associated documentation files (the "Software"), to deal in the Software without restriction,
#  including without limitation the rights to use, copy, modify, merge, publish, distribute,
#  sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
# 
#  The above copyright notice and this permission notice shall be included in all copies or
#  substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
# NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# ##################################################################################################

CONFIG_FILE=""
KERNEL_PATHS=()
DESIGN_NAME=""
SEGMENTED=""
PLATFORM="hw"
TCL_INJECT_ARGS=()

usage() {
    echo "Usage: $0 --cfg <config_file> --design-name <design_name> --platform <hw|emu|sim> --kernels <kernel_path1> <kernel_path2> ..."
    echo "--segmented (optional): Use this flag to create a segmented design"
    echo "--platform <hw|emu|sim>: Specify the platform type"
    exit 1
}

# Parse arguments
while [[ "$#" -gt 0 ]]; do
    case $1 in
        --cfg)
            CONFIG_FILE="$2"
            shift 2
            ;;
        --kernels)
            shift
            while [[ "$#" -gt 0 && "$1" != --* ]]; do
                KERNEL_PATHS+=("$1")
                shift
            done
            ;;
        --design-name)
            DESIGN_NAME="$2"
            shift 2
            ;;
        --segmented)
            SEGMENTED="--segmented"
            shift
            ;;
        --platform)
            PLATFORM="$2"
            shift 2
            ;;
        --source-pre-synth)
            shift
            TCL_INJECT_ARGS+=("--source-pre-synth")
            TCL_INJECT_ARGS+=("$(realpath "$1")")
            shift
            ;;
        --source-post-build)
            shift
            TCL_INJECT_ARGS+=("--source-post-build")
            TCL_INJECT_ARGS+=("$(realpath "$1")")
            shift
            ;;
        *)
            echo "Unknown parameter passed: $1"
            usage
            ;;
    esac
done

if [[ -z "$CONFIG_FILE" || ${#KERNEL_PATHS[@]} -eq 0 || -z "$DESIGN_NAME" ]]; then
    usage
fi

CONFIG_FILE=$(realpath "$CONFIG_FILE")

for i in "${!KERNEL_PATHS[@]}"; do
    KERNEL_PATHS[$i]=$(realpath "${KERNEL_PATHS[$i]}")
done

echo "Config file: $CONFIG_FILE"
echo "Kernel paths: ${KERNEL_PATHS[@]}"
echo "Design name: $DESIGN_NAME"


HOME_DIR=$(realpath .)
echo "HOME_DIR" $HOME_DIR
IPREPO_DIR=$(realpath ./iprepo)


mkdir -p build
cd build

if [ "$PLATFORM" = "hw" ]; then
    cp -r $HOME_DIR/submodules/aved aved-fork
fi
BUILD_DIR=$(realpath $HOME_DIR/build)
AVED_DIR=$(realpath $HOME_DIR/build/aved-fork)
AVED_HW=$(realpath $AVED_DIR/hw/amd_v80_gen5x8_24.1)
AVED_IPREPO=$(realpath $AVED_DIR/hw/amd_v80_gen5x8_24.1/src/iprepo)

if [ "$PLATFORM" = "sim" ]; then
    mkdir -p $BUILD_DIR/sim
    mkdir -p $BUILD_DIR/sim/iprepo
fi

if [ "$PLATFORM" = "hw" ]; then
    echo "Copying kernels to AVED iprepo"
    cp -r $HOME_DIR/iprepo/* $AVED_IPREPO
    rm -rf $AVED_IPREPO/kernel_*
    for kernel_path in "${KERNEL_PATHS[@]}"; do
        target_dir=$(mktemp -d "$AVED_IPREPO/kernel_XXXXXX")
        cp -r "$kernel_path" "$target_dir"
    done
fi

if [ "$PLATFORM" = "sim" ]; then
    echo "Copying kernels to SIM iprepo"
    rm -rf $BUILD_DIR/sim/iprepo/kernel_*
    for kernel_path in "${KERNEL_PATHS[@]}"; do
        target_dir=$(mktemp -d "$BUILD_DIR/sim/iprepo/kernel_XXXXXX")
        cp -r "$kernel_path" "$target_dir"
    done
fi

echo "Linker step"
echo "Segmented design" $SEGMENTED
vitis_include_path=$(dirname $(dirname $(which vitis)))/include
pushd ${BUILD_DIR}
    cmake ..
    make -j9
    ./v80++-linker --cfg "$CONFIG_FILE" --platform "$PLATFORM" $SEGMENTED "${TCL_INJECT_ARGS[@]}" --kernels "${KERNEL_PATHS[@]}"
    if [ "$PLATFORM" = "hw" ]; then
        cp run_pre.tcl $AVED_DIR/hw/amd_v80_gen5x8_24.1/src/run_pre.tcl
        cp -r ../resources/dcmac $AVED_DIR/hw/amd_v80_gen5x8_24.1/src/dcmac
        cp dcmac_config.tcl $AVED_DIR/hw/amd_v80_gen5x8_24.1/src/dcmac/tcl/dcmac_config.tcl
        cp ../resources/run_post.tcl $AVED_DIR/hw/amd_v80_gen5x8_24.1/src/run_post.tcl
        cp ../resources/create_design.tcl $AVED_DIR/hw/amd_v80_gen5x8_24.1/src/create_design.tcl
        cp run_post.tcl $AVED_DIR/hw/amd_v80_gen5x8_24.1/src/run_post.tcl
    fi
    if [ "$PLATFORM" = "emu" ]; then
        cpp_files="tb.cpp "
        for kernel_path in "${KERNEL_PATHS[@]}"; do
            cpp_files+="$kernel_path/../*.cpp "
        done
        g++ $cpp_files -o vpp_emu -I $vitis_include_path -lzmq -I /usr/include/jsoncpp/ -ljsoncpp
    fi
    if [ "$PLATFORM" = "sim" ]; then
        vivado -source run_pre.tcl -mode tcl
        cd sim/sim_prj/sim_prj.sim/sim_1/behav/xsim
        ./compile.sh
        ./elaborate.sh
        mkdir -p $HOME_DIR/sim/build
        cp -r xsim.dir $BUILD_DIR/../../.
        cd $HOME_DIR/sim/build && cmake ../ && make -j9
        cp $HOME_DIR/sim/build/vpp_sim $BUILD_DIR
        cp -r $HOME_DIR/sim/build/xsim.dir $BUILD_DIR
    fi
popd

# hw build
if [ "$PLATFORM" = "hw" ]; then
    echo "Hardware build"
    pushd ${AVED_HW}
        ./build_all.sh
        python3 $HOME_DIR/resources/gen_version.py --log_file ./build/vivado.log --name $DESIGN_NAME
        python3 $HOME_DIR/resources/create_clk.py --system_map $BUILD_DIR/system_map.xml --timing build/report_timing.txt
        python3 $HOME_DIR/resources/report_utilization.py --resource_file build/report_utilization.txt
    popd
else
    echo "Skipping hardware build as the platform is not set to hardware."
fi

# vrtbin creation
echo "Creating vrtbin"
if [ "$PLATFORM" = "hw" ]; then

    pushd ${BUILD_DIR}
    if [[ "$SEGMENTED" == "--segmented" ]]; then
        cp $AVED_DIR/hw/amd_v80_gen5x8_24.1/build/prj.runs/impl_1/top_wrapper_pld.pdi design.pdi
    else
        cp $AVED_DIR/hw/amd_v80_gen5x8_24.1/build/amd_v80_gen5x8_24.1_nofpt.pdi design.pdi
    fi
        cp $AVED_DIR/hw/amd_v80_gen5x8_24.1/version.json version.json
        cp $AVED_DIR/hw/amd_v80_gen5x8_24.1/build/utilization_report.xml report_utilization.xml
        tar -cvf ${DESIGN_NAME}_hw.vrtbin system_map.xml design.pdi version.json report_utilization.xml
    popd
fi

if [ "$PLATFORM" = "emu" ]; then
    pushd ${BUILD_DIR}
        tar -cvf ${DESIGN_NAME}_emu.vrtbin system_map.xml vpp_emu
    popd
fi

if [ "$PLATFORM" = "sim" ]; then
    pushd ${BUILD_DIR}
        tar -cvf ${DESIGN_NAME}_sim.vrtbin system_map.xml vpp_sim
    popd
fi